{"version":3,"sources":["components/Event/Event.js","components/Loader/Loader.js","fakeAPI/index.js","swController.js","helper.js","pages/Main.js","App.js","serviceWorker.js","index.js"],"names":["VALUE_STATUS","Event","this","props","timeEnd","timeStart","info","delay","status","delayStyle","animation","includes","animationDelay","className","style","title","description","PureComponent","Loader","React","memo","getData","url","Promise","resolve","reject","setTimeout","a","fetch","response","ok","json","data","check","navigator","Error","window","registerServiceWorker","serviceWorker","register","swRegistration","requestNotificationPermission","Notification","requestPermission","showLocalNotification","body","options","showNotification","main","checkTime","dateStart","dateEnd","name","currentUTCDateStart","convertTimeToCurrent","currentUTCDateEnd","dateNow","Date","tick","getTime","getRegistrations","then","registration","showNotify","notificationInterval","date","UTCDate","parse","hours","getHours","minutes","getMinutes","getFullYear","getMonth","getDate","getFormatTime","toString","padStart","join","Main","state","events","message","loader","result","collection","setState","length","map","item","index","key","id","folder","App","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker","swController"],"mappings":"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","file":"static/js/main.de2840a3.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\r\nimport './Event.css';\r\n\r\nconst VALUE_STATUS = [\r\n  'default',\r\n  'online'\r\n];\r\n\r\nclass Event extends PureComponent {\r\n  render() {\r\n    const { timeEnd, timeStart, info, delay, status } = this.props;\r\n    const delayStyle = {\r\n      animation: `${VALUE_STATUS.includes(status) ? 'fade-in' : 'fade-in2' } .5s forwards`,\r\n      animationDelay: `${delay*150}ms`\r\n    }\r\n    return (\r\n      <div className={`event-block App--margin event-block--${status}`} style={delayStyle}>\r\n        <div className=\"event-block__time\">{`${timeStart} - ${timeEnd}`}</div>\r\n        <div className=\"event-block__item\">\r\n        <h2 className=\"event-block__title\">{info.title}</h2>\r\n          <div className=\"event-block__description\">{info.description}</div>\r\n        </div>\r\n      </div>\r\n    )\r\n  };\r\n}\r\n\r\nexport default Event;","import React from 'react';\r\nimport './Loader.css'\r\n\r\nconst Loader = React.memo(() => {\r\n    return (\r\n        <div className=\"center\">\r\n            <div className=\"Loader\">\r\n                <div /><div />\r\n            </div>\r\n        </div>\r\n    )\r\n});\r\n\r\nexport default Loader;","export function getData(url) {\r\n    return new Promise((resolve, reject) => {\r\n        setTimeout(async () => {\r\n            try {\r\n                let response = await fetch(url);\r\n                if (response.ok) { // если HTTP-статус в диапазоне 200-299\r\n                    // получаем тело ответа (см. про этот метод ниже)\r\n                    const data = await response.json();\r\n                    resolve(data);\r\n                }\r\n            } catch(err) {\r\n                reject(err);\r\n            }\r\n        }, 300);\r\n    })\r\n}","const check = () => {\r\n    if (!(\"serviceWorker\" in navigator)) {\r\n        throw new Error(\"No Service Worker support!\");\r\n    }\r\n    if (!(\"PushManager\" in window)) {\r\n        throw new Error(\"No Push API Support!\");\r\n    }\r\n};\r\n\r\nconst registerServiceWorker = async () => {\r\n    const swRegistration = await navigator.serviceWorker.register(\"sw.js\");\r\n    return swRegistration;\r\n};\r\n    \r\nconst requestNotificationPermission = async () => {\r\n    const permission = await window.Notification.requestPermission();\r\n    if (permission !== \"granted\") {\r\n        throw new Error(\"Permission not granted for Notification\");\r\n    }\r\n};\r\nconst showLocalNotification = (title, body, swRegistration) => {\r\n    const options = {\r\n        body\r\n    };\r\n    swRegistration.showNotification(title, options);\r\n}\r\n\r\nexport const showNotify = (title = 'This is titless', body = 'this is the message') => {\r\n    navigator.serviceWorker.getRegistrations().then(registration => {\r\n        showLocalNotification(title, body, registration[0]);\r\n    });\r\n}\r\n\r\nexport const main = async () => {\r\n    check();\r\n    const swRegistration = await registerServiceWorker();\r\n    const permission =  await requestNotificationPermission();\r\n    showLocalNotification('TimeList App', 'This PWA ready to GO!', swRegistration);\r\n}","import {showNotify} from './swController';\r\n\r\nexport function checkTime(dateStart, dateEnd, name) {\r\n    const currentUTCDateStart = convertTimeToCurrent(dateStart);\r\n    const currentUTCDateEnd = convertTimeToCurrent(dateEnd);\r\n    const dateNow = new Date();\r\n    if (dateNow < currentUTCDateStart) {\r\n        notificationInterval(currentUTCDateStart, name);\r\n        return 'default';\r\n    }\r\n    return dateNow < currentUTCDateEnd ? 'online' : 'past';\r\n}\r\n\r\nfunction notificationInterval(dateStart, name) {\r\n    let timerId = setTimeout(function tick() {\r\n        const currentDateTime = new Date().getTime();\r\n        const dateStartTime = dateStart.getTime();\r\n        if (currentDateTime > dateStartTime - 60000) {\r\n            showNotify(name, 'Событие скоро начнется!');\r\n        } else {\r\n            timerId = setTimeout(tick, 60000);\r\n        }\r\n    }, 0);\r\n}\r\n\r\nfunction convertTimeToCurrent(date) {\r\n    const UTCDate = new Date(Date.parse(`${date}Z`));\r\n    const hours = UTCDate.getHours();\r\n    const minutes = UTCDate.getMinutes();\r\n    const dateNow = new Date();\r\n    return new Date(dateNow.getFullYear(), dateNow.getMonth(), hours ? dateNow.getDate() : dateNow.getDate() + 1, hours, minutes);\r\n}\r\n\r\nexport function getFormatTime(date) {\r\n    const UTCDate = new Date(Date.parse(`${date}Z`));\r\n    const hours = UTCDate.getHours();\r\n    const minutes = UTCDate.getMinutes();\r\n    const formattedTime = [\r\n        hours.toString().padStart(2, '0'),\r\n        minutes.toString().padStart(2, '0')\r\n    ].join(':');\r\n    return formattedTime;\r\n}","import React, { PureComponent } from 'react';\r\nimport Event from '../components/Event/Event';\r\nimport Loader from '../components/Loader/Loader';\r\nimport { getData } from '../fakeAPI/index';\r\nimport { getFormatTime, checkTime } from '../helper';\r\n\r\nclass Main extends PureComponent {\r\n    state = {\r\n        events: [],\r\n        message: '',\r\n        loader: true\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const result = await getData('./db.json');\r\n        const events = result?.collection[0].events;\r\n        \r\n        if (events) {\r\n            this.setState({\r\n                events,\r\n                loader: false\r\n            });\r\n        } else {\r\n            this.setState({\r\n                message: 'Ошибка HTTP',\r\n                loader: false\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {events, loader, message} = this.state;  \r\n        return (\r\n            <div className=\"App\">\r\n                <header className=\"App-header\">\r\n                    <h1>Расписание мероприятий</h1>\r\n                    {\r\n                        events.length !== 0 ? events.map((item, index) => \r\n                            <Event \r\n                                key={`${item.id}-${item.folder}`} \r\n                                timeStart={getFormatTime(item.timeStart)} \r\n                                timeEnd={getFormatTime(item.timeEnd)} \r\n                                info={item.info}\r\n                                delay={index}\r\n                                status={checkTime(item.timeStart, item.timeEnd, item.info.title)}\r\n                            />\r\n                        ) : loader ? <Loader /> : <p>{message ? message : 'Нету мероприятий'}</p>\r\n                    }\r\n                </header>\r\n            </div>\r\n        )\r\n    };\r\n}\r\n\r\nexport default Main;","import React from 'react';\nimport Main from './pages/Main';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Main />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/sw.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport * as swController from './swController';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\nswController.main();"],"sourceRoot":""}