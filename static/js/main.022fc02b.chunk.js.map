{"version":3,"sources":["components/Event/Event.js","components/Loader/Loader.js","fakeAPI/index.js","swController.js","helper.js","pages/Main.js","App.js","serviceWorker.js","index.js"],"names":["VALUE_STATUS","Event","this","props","timeEnd","timeStart","info","delay","status","delayStyle","animation","includes","animationDelay","className","style","title","description","PureComponent","Loader","React","memo","getData","url","Promise","resolve","reject","setTimeout","a","fetch","response","ok","json","data","check","navigator","Error","window","registerServiceWorker","serviceWorker","register","swRegistration","requestNotificationPermission","Notification","requestPermission","showLocalNotification","body","options","showNotification","main","checkTime","dateStart","dateEnd","currentUTCDateStart","convertTimeToCurrent","currentUTCDateEnd","dateNow","Date","tick","itemData","arrFiltred","filter","pushed","isStatus","arrNotifyText","forEach","item","timeStamp","getTime","now","inDateScope","push","length","getRegistrations","then","registration","showNotify","join","date","UTCDate","parse","hours","getHours","minutes","getMinutes","getFullYear","getMonth","getDate","getFormatTime","toString","padStart","Main","state","events","message","loader","result","collection","setState","map","index","key","id","folder","App","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker","swController"],"mappings":"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","file":"static/js/main.022fc02b.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\r\nimport './Event.css';\r\n\r\nconst VALUE_STATUS = [\r\n  'default',\r\n  'online'\r\n];\r\n\r\nclass Event extends PureComponent {\r\n  render() {\r\n    const { timeEnd, timeStart, info, delay, status } = this.props;\r\n    const delayStyle = {\r\n      animation: `${VALUE_STATUS.includes(status) ? 'fade-in' : 'fade-in2' } .5s forwards`,\r\n      animationDelay: `${delay*150}ms`\r\n    }\r\n    return (\r\n      <div className={`event-block App--margin event-block--${status}`} style={delayStyle}>\r\n        <div className=\"event-block__time\">{`${timeStart} - ${timeEnd}`}</div>\r\n        <div className=\"event-block__item\">\r\n        <h2 className=\"event-block__title\">{info.title}</h2>\r\n          <div className=\"event-block__description\">{info.description}</div>\r\n        </div>\r\n      </div>\r\n    )\r\n  };\r\n}\r\n\r\nexport default Event;","import React from 'react';\r\nimport './Loader.css'\r\n\r\nconst Loader = React.memo(() => {\r\n    return (\r\n        <div className=\"center\">\r\n            <div className=\"Loader\">\r\n                <div /><div />\r\n            </div>\r\n        </div>\r\n    )\r\n});\r\n\r\nexport default Loader;","export function getData(url) {\r\n    return new Promise((resolve, reject) => {\r\n        setTimeout(async () => {\r\n            try {\r\n                let response = await fetch(url);\r\n                if (response.ok) { // если HTTP-статус в диапазоне 200-299\r\n                    // получаем тело ответа (см. про этот метод ниже)\r\n                    const data = await response.json();\r\n                    resolve(data);\r\n                }\r\n            } catch(err) {\r\n                reject(err);\r\n            }\r\n        }, 300);\r\n    })\r\n}","const check = () => {\n    if (!(\"serviceWorker\" in navigator)) {\n        throw new Error(\"No Service Worker support!\");\n    }\n    if (!(\"PushManager\" in window)) {\n        throw new Error(\"No Push API Support!\");\n    }\n};\n\nconst registerServiceWorker = async () => {\n    const swRegistration = await navigator.serviceWorker.register(\"sw.js\");\n    return swRegistration;\n};\n    \nconst requestNotificationPermission = async () => {\n    const permission = await window.Notification.requestPermission();\n    if (permission !== \"granted\") {\n        throw new Error(\"Permission not granted for Notification\");\n    }\n};\nconst showLocalNotification = (title, body, swRegistration) => {\n    const options = {\n        body\n    };\n    swRegistration.showNotification(title, options);\n}\n\nexport const showNotify = (title = 'This is titless', body = 'this is the message') => {\n    navigator.serviceWorker.getRegistrations().then(registration => {\n        showLocalNotification(title, body, registration[0]);\n    });\n}\n\nexport const main = async () => {\n    check();\n    const swRegistration = await registerServiceWorker();\n    const permission =  await requestNotificationPermission();\n    showLocalNotification('TimeList App', 'This PWA ready to GO!', swRegistration);\n}","import {showNotify} from './swController';\n\nconst TIME_PUSH = 5 * 60 * 1000;\nconst VALUE_STATUS = [\n  'past',\n  'online'\n];\n\nexport function checkTime(dateStart, dateEnd) {\n    const currentUTCDateStart = convertTimeToCurrent(dateStart);\n    const currentUTCDateEnd = convertTimeToCurrent(dateEnd);\n    const dateNow = new Date();\n    return dateNow < currentUTCDateStart ? 'default' : dateNow < currentUTCDateEnd ? 'online' : 'past';\n}\n\nfunction inDateScope(dateStart) {\n    const timeStamp = convertTimeToCurrent(dateStart).getTime() - Date.now();\n    return timeStamp > 0 && timeStamp < TIME_PUSH;\n}\n\nexport function notificationInterval(data) {\n    setTimeout(tick, 0, data);\n}\n\nfunction tick(itemData) {\n    const arrFiltred = itemData.filter(({timeStart, timeEnd, pushed}) => {\n        const isStatus = VALUE_STATUS.includes(checkTime(timeStart, timeEnd));\n        return !pushed && !isStatus;\n    });\n    const arrNotifyText = [];\n    arrFiltred.forEach((item) => {\n        if (inDateScope(item.timeStart)) {\n            arrNotifyText.push(`Событие ${item.info.title} скоро начнется`);\n            item.pushed = true;\n        }\n    });\n    if (arrNotifyText.length) {\n       showNotify('', arrNotifyText.join('\\n'));\n    }\n    if (arrFiltred.length) {\n        setTimeout(tick, TIME_PUSH, arrFiltred);\n    }\n}\n\nfunction convertTimeToCurrent(date) {\n    const UTCDate = new Date(Date.parse(`${date}Z`));\n    const hours = UTCDate.getHours();\n    const minutes = UTCDate.getMinutes();\n    const dateNow = new Date();\n    return new Date(dateNow.getFullYear(), dateNow.getMonth(), hours ? dateNow.getDate() : dateNow.getDate() + 1, hours, minutes);\n}\n\nexport function getFormatTime(date) {\n    const UTCDate = new Date(Date.parse(`${date}Z`));\n    const hours = UTCDate.getHours();\n    const minutes = UTCDate.getMinutes();\n    const formattedTime = [\n        hours.toString().padStart(2, '0'),\n        minutes.toString().padStart(2, '0')\n    ].join(':');\n    return formattedTime;\n}","import React, { PureComponent } from 'react';\nimport Event from '../components/Event/Event';\nimport Loader from '../components/Loader/Loader';\nimport { getData } from '../fakeAPI/index';\nimport { getFormatTime, checkTime, notificationInterval } from '../helper';\n\nclass Main extends PureComponent {\n    state = {\n        events: [],\n        message: '',\n        loader: true\n    }\n\n    async componentDidMount() {\n        const result = await getData('./db.json');\n        const events = result?.collection[0].events;\n        \n        if (events) {\n            notificationInterval(events);\n            this.setState({\n                events,\n                loader: false\n            });\n        } else {\n            this.setState({\n                message: 'Ошибка HTTP',\n                loader: false\n            });\n        }\n    }\n\n    render() {\n        const {events, loader, message} = this.state;  \n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <h1>Расписание мероприятий</h1>\n                    {\n                        events.length !== 0 ? events.map((item, index) => \n                            <Event \n                                key={`${item.id}-${item.folder}`} \n                                timeStart={getFormatTime(item.timeStart)} \n                                timeEnd={getFormatTime(item.timeEnd)} \n                                info={item.info}\n                                delay={index}\n                                status={checkTime(item.timeStart, item.timeEnd, item.info.title)}\n                            />\n                        ) : loader ? <Loader /> : <p>{message ? message : 'Нету мероприятий'}</p>\n                    }\n                </header>\n            </div>\n        )\n    };\n}\n\nexport default Main;","import React from 'react';\nimport Main from './pages/Main';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Main />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/sw.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport * as swController from './swController';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\nswController.main();"],"sourceRoot":""}